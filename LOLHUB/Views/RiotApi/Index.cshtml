@*@model IEnumerable<RiotApi.Models.SummonerInfoModel>;*@
@model LOLHUB.Models.SummonerViewModels.SummonersAndMachHistories;

<h2>@ViewBag.SummonnerIsAlreadyAssigned</h2>

@if (TempData["SummonerDontExists"] == null)
{
    <h3>Dane Przywoływacza:</h3>

    <table class="table table-striped table-bordered table-lg">
        <tr>
            <th class="text-left">Nickname</th>
            <th class="text-left">ID</th>
            <th class="text-left">Poziom Przywoływacza</th>
            <td class="text-left">Konto Zweryfikowane ?</td>
            <td class="text-left">Właściciel</td>
        </tr>
        <tr>
            @foreach (var summoner in Model.Summoner)
            {
                <td class="text-left">@summoner.name</td>
                <td class="text-left">@summoner.id</td>
                <td class="text-left">@summoner.summonerLevel</td>
                <td class="text-left">@summoner.IsVerified</td>
                <td class="text-left">@summoner.ConectedAccount</td>
            }
        </tr>
    </table>

    if (Model.Summoner.Where(s => s.IsVerified == false).Any())
    {
        <div class="btn-toolbar mb-4" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group">
                <form asp-controller="riotapi" asp-action="regenerateCode" method="post">
                    <input type="hidden" id="id" name="id" value="@Int32.Parse(Model.Summoner.Select(s => s.id).First().ToString())" />
                    <button type="submit" class="btn btn-danger">Generuj Nowy Kod Weryfikacyjny</button>
                </form>
            </div>

            <div class="input-group">
                <input runat="server" readonly="readonly" id="id" type="text" class="form-control text-center" style="font-size:larger; font-weight:500;" Value=@Model.Summoner.Select(s=>s.Code).First().ToString() aria-describedby="btnGroupAddon" maxlength="20" size="22" />
            </div>
            <div class="btn-group" style="margin-right:20px">
                <form asp-controller="riotapi" asp-action="Check" method="post">
                    <input type="hidden" id="id" name="id" value="@Int32.Parse(Model.Summoner.Select(s => s.id).First().ToString())" />
                    <input type="hidden" id="code" name="code" value=@Model.Summoner.Select(s => s.Code).First() />
                    <button type="submit" class="btn btn-warning">Weryfikuj</button>
                </form>
            </div>
        </div>

    }
    else
    {
        <p class="text-info">Twoje konto jest już sparowane z aplikacją LOLHUB :)</p>


        <h4>Statystkiki ostatnich rozegranych meczy:</h4>

        <table class="table table-striped table-bordered table-lg">
            <tr>
                @*<th class="text-left">Id</th>*@
                <th class="text-left">MatchId</th>
                <th class="text-left">SummonerName</th>
                <th class="text-left">Kills</th>
                <th class="text-left">Deaths</th>
                <th class="text-left">Assists</th>
                <th class="text-left">ChampionId</th>
                <th class="text-left">Win</th>
                <th class="text-left">GameDuration</th>
            </tr>
            @foreach (var MatchStats in Model.GameStatistics)
            {
                <tr>
                    @*<td class="text-left">@MatchStats.Id</td>*@
                    <td class="text-left">@MatchStats.MatchSelectedData.Id</td>
                    <td class="text-left">@MatchStats.SummonerName</td>
                    <td class="text-left">@MatchStats.Kills</td>
                    <td class="text-left">@MatchStats.Deaths</td>
                    <td class="text-left">@MatchStats.Assists</td>
                    <td class="text-left">@MatchStats.ChampionId</td>
                    <td class="text-left">@MatchStats.Win</td>
                    <td class="text-left">
                        @{
                            long seconds = 0;
                            if ((MatchStats.GameDuration % 60) < 9) { seconds = (MatchStats.GameDuration % 60) * 10; }
                            else { seconds = (MatchStats.GameDuration % 60); }
                            string GameDurationInMinutes = (MatchStats.GameDuration / 60 + ":" + seconds);
                    }
                    @GameDurationInMinutes.ToString() min
                </td>
            </tr>
        }

        </table>

        <table class="table table-striped table-bordered table-lg">
            <tr>
                <th>K/D/A</th>
                <th>Win %</th>
                <th>Game Played</th>
                <th>Favorite champion</th>
            </tr>
            <tr>
                <td>
                    @{
                        double kill = @Model.GameStatistics.Select(g => g.Kills).Sum();
                        double assists = @Model.GameStatistics.Select(g => g.Assists).Sum();
                        double deaths = @Model.GameStatistics.Select(g => g.Deaths).Sum();
                        double kda = ((kill + assists) / deaths);
                }
                @Math.Round(kda, 2)
            </td>
            <td>
                @{
                    int Win = Model.GameStatistics.Where(g => g.Win == true).Count();
                    int GamesPlayed = Model.GameStatistics.Where(g => g.Win == true).Count();
                    float WinRatio = (Win * 100) / GamesPlayed;
            }
            @WinRatio %
        </td>
        <td>@Model.GameStatistics.Select(g => g.GameId).Count()</td>
        <td>
            @Model.GameStatistics.GroupBy(g => g.ChampionId).OrderByDescending(g => g.Count()).Select(g=>g.Key).First()


        </td>
    </tr>
</table>
}
}
